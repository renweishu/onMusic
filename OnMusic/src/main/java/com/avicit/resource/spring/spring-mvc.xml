<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- 要使用spring mvc中的@Controller注解，就必须要配置mvc:annotation-driven -->
	<!--否则org.springframework.web.servlet.DispatcherServlet无法找到控制器并把请求分发到控制器。 -->
	<mvc:annotation-driven />

	<!-- 方式1 扫描文件（自动将servicec controller层注入）使用 context:include-filter过滤注入类型 -->
	<!-- 在spring-mvc.xml 配置文件中，只扫描controller（controller层注入）配置注解扫描的包路径 ，主要针对action -->
	<context:component-scan base-package="com.avicit"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>


	<!-- 上传文件时需要做的配置 定义最大文件上传尺寸 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置单个文件不超过20M 计算为20*1024*1024=20971520 -->
		<property name="maxUploadSize" value="20971520"></property>
	</bean>

	<!-- 避免IE在ajax请求时，返回json出现下载 -->
	<bean id="jacksonMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 这个配置告诉spring 静态资源的处理方式 以便能够请求 到 css、 js、 jpg等资源文件 -->
	<mvc:resources mapping="/**" location="/" />

	<!-- 1、重定向 ||即如果当前路径是/ 则重定向到/index -->
	<!-- 2、如果当前路径是/ 则交给相应的视图解析器直接解析为视图 /index.jsp -->
	<mvc:view-controller path="/" view-name="forward:/index" />

	<!-- 对模型视图添加前后缀 配置action中返回的视图配置 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 控制器异常处理 -->
	<!-- 实现HandlerExceptionResolver接口很简单， 只需实现resolveException（Exception，Handler）方法， 
		并返回一个ModelAndView，除此之外， 也可以直接使用SimpleMappingExceptionResolver。 这个解析器允许你取得任何可能被抛出的异常的类名，并把它映射到一个视图名 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="com.avicit.framework.util.exception.ValidationException">
					E101
				</prop>
			</props>
		</property>
	</bean>


	<!-- AOP配置 -->
	<!-- 双亲上下文的原因:Spring容器优先加载由ServletContextListener（对应applicationContext.xml）产生的父容器， 
		而SpringMVC（对应mvc_dispatcher_servlet.xml）产生的是子容器。 子容器Controller进行扫描装配时装配的@Service注解的实例是没有经过事务加强处理， 
		即没有事务处理能力的Service，而父容器进行初始化的Service是保证事务的增强处理能力的。 如果不在子容器中将Service exclude掉， 
		此时得到的将是原样的无事务处理能力的Service。 同时，如果对于Controller层， 如果想使用AOP功能， 需要在对应mvc_dispatcher_servlet.xml配置aop:aspectj-autoproxy -->
	<aop:aspectj-autoproxy />


</beans>
