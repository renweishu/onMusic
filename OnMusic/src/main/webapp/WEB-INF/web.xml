<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- log4jConfigLocation定义位置在： -->
	<!-- org.springframework.web.util.Log4jWebConfigurer.class中。 -->
	<!-- contextConfigLocation定义位置在： -->
	<!-- org.springframework.web.context.ContextLoader.class中。 -->
	<!-- webAppRootKey的位置及一些常用名称位置在： -->
	<!-- org.springframework.web.util.WebUtils.class中。 -->

	<!--param-name 设定上下文的参数名称。必须是唯一名称 -->
	<!--param-value 设定的参数名称的值 -->
	<!--初始化过程： -->
	<!--在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。 -->
	<!--接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。 -->
	<!--接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。 -->
	<!--容器创建<listener></listener>中的类实例,即创建监听（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。 -->
	<!--在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法， -->
	<!--在这个方法中可以通过event.getServletContext().getInitParameter("contextConfigLocation") 
		来得到context-param 设定的值。 -->
	<!--在这个类中还必须有一个contextDestroyed(ServletContextEvent event) 销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。 -->
	<!--得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早。 -->

	<!--由上面的初始化过程可知容器对于web.xml的加载过程是context-param >> listener >> fileter >> 
		servlet -->
	<!-- 如何使用 -->
	<!--页面中 -->
	<!--${initParam.contextConfigLocation} -->
	<!--Servlet中 -->
	<!--String paramValue=getServletContext().getInitParameter("contextConfigLocation") -->

	<!-- log4j 配置 开始 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:com/avicit/resource/log4j/log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>600000</param-value>
	</context-param>
	<!-- webAppRootKey是在java web项目的web.xml配置文件中表示项目的唯一标示 -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>OnMusic.root</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<!-- log4j 配置 结束 -->

	<!-- 设置servlet编码开始 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 设置servlet编码结束 -->

	<!-- Spring配置文件开始 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:com/avicit/resource/spring/spring-base.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Spring配置文件结束 -->

	<!-- 浏览器不支持put,delete等method,由该filter将/blog?_method=delete转换为标准的http delete方法 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<servlet-name>spring</servlet-name>
	</filter-mapping>


	<servlet>
		<servlet-name>spring-dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:com/avicit/resource/spring/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring-dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<error-page>
		<error-code>500</error-code>
		<location>/error.jsp?code=500</location>
	</error-page>

	<error-page>
		<error-code>404</error-code>
		<location>/error.jsp?code=404</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/error.jsp?code=405</location>
	</error-page>
	<error-page>
		<error-code>406</error-code>
		<location>/error.jsp?code=406</location>
	</error-page>
	<error-page>
		<error-code>415</error-code>
		<location>/error.jsp?code=415</location>
	</error-page>
	<error-page>
		<error-code>400</error-code>
		<location>/error.jsp?code=400</location>
	</error-page>

	<welcome-file-list>
		<welcome-file>/welcome.jsp</welcome-file>
	</welcome-file-list>

</web-app>
